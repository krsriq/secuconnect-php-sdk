<?php
/**
 * PaymentContainersApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Secuconnect\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SecuConnect API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Secuconnect\Client;

use PHPUnit_Framework_TestCase;
use Secuconnect\Client\Api\PaymentContainersApi;
use Secuconnect\Client\Api\SecuconnectObjects;
use Secuconnect\Client\Model\BankAccountDescriptor;
use Secuconnect\Client\Model\InlineResponse200;
use Secuconnect\Client\Model\PaymentContainerMandate;
use Secuconnect\Client\Model\PaymentContainersDTO;
use Secuconnect\Client\Model\PaymentContainersDTOPrivate;
use Secuconnect\Client\Model\PaymentContainersProductModel;

/**
 * PaymentContainersApiTest Class Doc Comment
 *
 * @category Class
 * @package  Secuconnect\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentContainersApiTest extends PHPUnit_Framework_TestCase
{
    private static $containerId;
    private static $container;
    private static $privateData;
    private static $customer;
    private static $bankAccount;
    private static $created;
    private static $updated;
    private static $testContainer1;
    private static $testContainer2;
    private static $testContainer3;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        self::$containerId = '';

        self::$privateData = new PaymentContainersDTOPrivate();
        self::$privateData
            ->setOwner('John Doe')
            ->setIban('DE12500105170648489890')
            ->setBic('ABCDDE12XXX');

        self::$container = new PaymentContainersDTO();
        self::$container
            ->setType('bank_account')
            ->setPrivate(self::$privateData);

        self::$customer = SecuconnectObjects::getInstance()->getCustomer();

        self::$bankAccount = new BankAccountDescriptor();

        self::$created = '';
        self::$updated = '';
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        $this->api = SecuconnectObjects::getInstance()->getApi();
        $this->api = new PaymentContainersApi();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
        $this->api = null;
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
        self::$containerId = null;
        self::$container = null;
        self::$privateData = null;
        self::$customer = null;
        self::$bankAccount = null;
        self::$created = null;
        self::$updated = null;
    }

    /**
     * Test case for paymentContainersPost
     */
    public function testPaymentContainersPost()
    {
        try {
            $response = $this->api->paymentContainersPost(self::$container);
            self::$containerId = $response->getId();
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty(self::$containerId);
        $this->assertInstanceOf(PaymentContainersProductModel::class, $response);
        $this->assertEquals('payment.containers', $response->getObject());
        $this->assertNotNull($response->getId());
        $this->assertNotEmpty($response->getId());
        $this->assertEquals('payment.contracts', $response->getContract()->getObject());
        $this->assertNotNull($response->getContract()->getId());
        $this->assertNotEmpty($response->getContract()->getId());
        $this->assertNull($response->getCustomer());
        $this->assertNull($response->getAssign());
        $this->assertInstanceOf(BankAccountDescriptor::class, $response->getPrivate());
        $this->assertNotNull($response->getPrivate()->getOwner());
        $this->assertNotEmpty($response->getPrivate()->getOwner());
        $this->assertNotNull($response->getPrivate()->getIban());
        $this->assertNotEmpty($response->getPrivate()->getIban());
        $this->assertNotNull($response->getPrivate()->getBic());
        $this->assertNotEmpty($response->getPrivate()->getBic());
        $this->assertNotNull($response->getPrivate()->getBankname());
        $this->assertNotEmpty($response->getPrivate()->getBankname());

        self::$bankAccount = $response->getPrivate();

        $this->assertInstanceOf(BankAccountDescriptor::class, $response->getPublic());
        $this->assertEquals(self::$bankAccount->getOwner(), $response->getPublic()->getOwner());
        $this->assertEquals(self::$bankAccount->getIban(), $response->getPublic()->getIban());
        $this->assertEquals(self::$bankAccount->getBic(), $response->getPublic()->getBic());
        $this->assertEquals(self::$bankAccount->getBankname(), $response->getPublic()->getBankname());
        $this->assertEquals('bank_account', $response->getType());
        $this->assertNotNull($response->getCreated());
        $this->assertNotEmpty($response->getCreated());


        self::$created = $response->getCreated();

        $this->assertInstanceOf(PaymentContainerMandate::class, $response->getMandate());
        $this->assertNotNull($response->getMandate()->getSepaMandateId());
        $this->assertNotEmpty($response->getMandate()->getSepaMandateId());
        $this->assertNotNull($response->getMandate()->getIban());
        $this->assertNotEmpty($response->getMandate()->getIban());
        $this->assertNotNull($response->getMandate()->getBic());
        $this->assertNotEmpty($response->getMandate()->getBic());
        $this->assertNotNull($response->getMandate()->getType());
        $this->assertNotEmpty($response->getMandate()->getType());
        $this->assertNotNull($response->getMandate()->getStatus());
        $this->assertNotEmpty($response->getMandate()->getStatus());
        $this->assertNotNull($response->getMandate()->getIdentification());
        $this->assertNotEmpty($response->getMandate()->getIdentification());
    }

    /**
     * Test case for paymentContainersIdPut
     */
    public function testPaymentContainersIdPut()
    {
        self::$privateData
            ->setOwner('John Doe The Second');
        self::$container
            ->setType('bank_account')
            ->setAssign(false)
            ->setCustomer(self::$customer)
            ->setPrivate(self::$privateData);
        self::$bankAccount->setOwner('John Doe The Second');

        try {
            $response = $this->api->paymentContainersIdPut(
                self::$containerId,
                self::$container
            );
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty(self::$containerId);
        $this->assertInstanceOf(PaymentContainersProductModel::class, $response);
        $this->assertEquals('payment.containers', $response->getObject());
        $this->assertNotNull($response->getId());
        $this->assertNotEmpty($response->getId());
        $this->assertEquals('payment.contracts', $response->getContract()->getObject());
        $this->assertNotNull($response->getContract()->getId());
        $this->assertNotEmpty($response->getContract()->getId());
        $this->assertInstanceOf(BankAccountDescriptor::class, $response->getPrivate());
        $this->assertInstanceOf(BankAccountDescriptor::class, $response->getPublic());
        $this->assertEquals(self::$bankAccount->getOwner(), $response->getPrivate()->getOwner());
        $this->assertEquals(self::$bankAccount->getIban(), $response->getPrivate()->getIban());
        $this->assertEquals(self::$bankAccount->getBic(), $response->getPrivate()->getBic());
        $this->assertEquals(self::$bankAccount->getBankname(), $response->getPrivate()->getBankname());
        $this->assertInstanceOf(BankAccountDescriptor::class, $response->getPublic());
        $this->assertEquals(self::$bankAccount->getOwner(), $response->getPublic()->getOwner());
        $this->assertEquals(self::$bankAccount->getIban(), $response->getPublic()->getIban());
        $this->assertEquals(self::$bankAccount->getBic(), $response->getPublic()->getBic());
        $this->assertEquals(self::$bankAccount->getBankname(), $response->getPublic()->getBankname());
        $this->assertEquals('bank_account', $response->getType());
        $this->assertEquals(self::$created, $response->getCreated());
        $this->assertNotNull($response->getUpdated());
        $this->assertNotEmpty($response->getUpdated());
        $this->assertInstanceOf(PaymentContainerMandate::class, $response->getMandate());
        $this->assertNotNull($response->getMandate()->getSepaMandateId());
        $this->assertNotEmpty($response->getMandate()->getSepaMandateId());
        $this->assertNotNull($response->getMandate()->getIban());
        $this->assertNotEmpty($response->getMandate()->getIban());
        $this->assertNotNull($response->getMandate()->getBic());
        $this->assertNotEmpty($response->getMandate()->getBic());
        $this->assertNotNull($response->getMandate()->getType());
        $this->assertNotEmpty($response->getMandate()->getType());
        $this->assertNotNull($response->getMandate()->getStatus());
        $this->assertNotEmpty($response->getMandate()->getStatus());
        $this->assertNotNull($response->getMandate()->getIdentification());
        $this->assertNotEmpty($response->getMandate()->getIdentification());

        self::$updated = $response->getUpdated();
    }

    /**
     * Test case for paymentContainersGetById
     */
    public function testPaymentContainersGetById()
    {
        try {
            $response = $this->api->paymentContainersGetById(self::$containerId);
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertInstanceOf(PaymentContainersProductModel::class, $response);
        $this->assertEquals('payment.containers', $response->getObject());
        $this->assertEquals(self::$containerId, $response->getId());
        $this->assertEquals('payment.contracts', $response->getContract()->getObject());
        $this->assertNotNull($response->getContract()->getId());
        $this->assertNotEmpty($response->getContract()->getId());
        $this->assertInstanceOf(BankAccountDescriptor::class, $response->getPrivate());
        $this->assertInstanceOf(BankAccountDescriptor::class, $response->getPublic());
        $this->assertEquals(self::$bankAccount->getOwner(), $response->getPrivate()->getOwner());
        $this->assertEquals(self::$bankAccount->getIban(), $response->getPrivate()->getIban());
        $this->assertEquals(self::$bankAccount->getBic(), $response->getPrivate()->getBic());
        $this->assertEquals(self::$bankAccount->getBankname(), $response->getPrivate()->getBankname());
        $this->assertInstanceOf(BankAccountDescriptor::class, $response->getPublic());
        $this->assertEquals(self::$bankAccount->getOwner(), $response->getPublic()->getOwner());
        $this->assertEquals(self::$bankAccount->getIban(), $response->getPublic()->getIban());
        $this->assertEquals(self::$bankAccount->getBic(), $response->getPublic()->getBic());
        $this->assertEquals(self::$bankAccount->getBankname(), $response->getPublic()->getBankname());
        $this->assertEquals('bank_account', $response->getType());
        $this->assertEquals(self::$created, $response->getCreated());
        $this->assertEquals(self::$updated, $response->getUpdated());
    }

    /**
     * Test case for paymentContainersGet
     */
    public function testPaymentContainersGet()
    {
        try {
            $response = $this->api->paymentContainersGet();
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty($response);
        $this->assertInstanceOf(InlineResponse200::class, $response);
        $this->assertTrue(is_int($response->getCount()));

        foreach ($response->getData() as $container) {
            $this->assertInstanceOf(PaymentContainersProductModel::class, $container);
            $this->assertEquals('payment.containers', $container->getObject());
            $this->assertNotNull($container->getId());
            $this->assertNotEmpty($container->getId());
            $this->assertEquals('payment.contracts', $container->getContract()->getObject());
            $this->assertNotNull($container->getContract()->getId());
            $this->assertNotEmpty($container->getContract()->getId());
            $this->assertNotNull($container->getPrivate()->getIban());
            $this->assertNotEmpty($container->getPrivate()->getIban());
            $this->assertNotNull($container->getPrivate()->getBic());
            $this->assertNotEmpty($container->getPrivate()->getBic());
            $this->assertNotNull($container->getPrivate()->getBankname());
            $this->assertNotEmpty($container->getPrivate()->getBankname());
            $this->assertNotNull($container->getCreated());
            $this->assertNotEmpty($container->getCreated());
        }
    }

    /**
     * Test case for checking count param
     */
    public function testPaymentContainersGetCountQueryParam()
    {
        try {
            self::$privateData->setIban('DK5750510001322617');
            self::$container->setPrivate(self::$privateData);
            self::$testContainer1 = $this->api->paymentContainersPost(self::$container);
            self::$privateData->setIban('EE342200221034126658');
            self::$container->setPrivate(self::$privateData);
            self::$testContainer2 = $this->api->paymentContainersPost(self::$container);
            self::$privateData->setIban('FI9814283500171141');
            self::$container->setPrivate(self::$privateData);
            self::$testContainer3 = $this->api->paymentContainersPost(self::$container);

            $response = $this->api->paymentContainersGet(2);
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty($response);
        $this->assertEquals(2, count($response->getData()));
    }

    /**
     * Test case for checking offset param
     */
    public function testPaymentContainersGetOffsetQueryParam()
    {
        try {
            $response1 = $this->api->paymentContainersGet();
            $response2 = $this->api->paymentContainersGet(null, 1);
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty($response1);
        $this->assertNotEmpty($response2);
        $this->assertEquals($response1->getData()[1], $response2->getData()[0]);

        try {
            $this->api->paymentContainersIdDelete(self::$testContainer1->getId());
            $this->api->paymentContainersIdDelete(self::$testContainer2->getId());
            $this->api->paymentContainersIdDelete(self::$testContainer3->getId());
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }
    }

    /**
     * Test case for paymentContainersIdAssignSecondaryIdPost
     */
    public function testPaymentContainersIdAssignSecondaryIdPost()
    {
    }

    /**
     * Test case for paymentContainersIdAssignSecondaryIdDelete
     */
    public function testPaymentContainersIdAssignSecondaryIdDelete()
    {
    }

    /**
     * Test case for paymentContainersIdDelete
     */
    public function testPaymentContainersIdDelete()
    {
        try {
            $response = $this->api->paymentContainersIdDelete(self::$containerId);
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty($response);
        $this->assertInternalType('array', $response);
        $this->assertContainsOnlyInstancesOf(PaymentContainersProductModel::class, $response);
        $this->assertEquals('payment.containers', $response[0]->getObject());
        $this->assertEquals(self::$containerId, $response[0]->getId());
        $this->assertEquals('payment.contracts', $response[0]->getContract()->getObject());
        $this->assertNotNull($response[0]->getContract()->getId());
        $this->assertNotEmpty($response[0]->getContract()->getId());
        $this->assertInstanceOf(BankAccountDescriptor::class, $response[0]->getPrivate());
        $this->assertInstanceOf(BankAccountDescriptor::class, $response[0]->getPublic());
        $this->assertEquals(self::$bankAccount->getOwner(), $response[0]->getPrivate()->getOwner());
        $this->assertEquals(self::$bankAccount->getIban(), $response[0]->getPrivate()->getIban());
        $this->assertEquals(self::$bankAccount->getBic(), $response[0]->getPrivate()->getBic());
        $this->assertEquals(self::$bankAccount->getBankname(), $response[0]->getPrivate()->getBankname());
        $this->assertInstanceOf(BankAccountDescriptor::class, $response[0]->getPublic());
        $this->assertEquals(self::$bankAccount->getOwner(), $response[0]->getPublic()->getOwner());
        $this->assertEquals(self::$bankAccount->getIban(), $response[0]->getPublic()->getIban());
        $this->assertEquals(self::$bankAccount->getBic(), $response[0]->getPublic()->getBic());
        $this->assertEquals(self::$bankAccount->getBankname(), $response[0]->getPublic()->getBankname());
        $this->assertEquals('bank_account', $response[0]->getType());
        $this->assertEquals(self::$created, $response[0]->getCreated());
        $this->assertEquals(self::$updated, $response[0]->getUpdated());
    }
}
