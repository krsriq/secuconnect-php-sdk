<?php
/**
 * LoyaltyStoregroupsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Secuconnect\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 *
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Secuconnect\Client;

use PHPUnit\Framework\TestCase;
use Secuconnect\Client\Api\LoyaltyStoregroupsApi;
use Secuconnect\Client\Api\SecuconnectObjects;
use Secuconnect\Client\Model\LoyaltyStoregroupsDTO;
use Secuconnect\Client\Model\LoyaltyStoregroupsList;
use Secuconnect\Client\Model\LoyaltyStoregroupsProductModel;

/**
 * LoyaltyStoregroupsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Secuconnect\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoyaltyStoregroupsApiTest extends TestCase
{
    /**
     * @var LoyaltyStoregroupsApi
     */
    private static $api;

    /**
     * @var SecuconnectObjects
     */
    private static $instance;

    /**
     * @var LoyaltyStoregroupsList
     */
    private static $storegroupsList;

    /**
     * @var LoyaltyStoregroupsProductModel
     */
    private static $dummyStoregroupsProductModel;

    /**
     * @var LoyaltyStoregroupsDTO
     */
    private static $storegroupDTO;

    /**
     * Setup before running any test cases
     * @throws ApiException
     */
    public static function setUpBeforeClass()
    {
        self::$instance = SecuconnectObjects::getInstance();
        self::$instance->authenticateByApplicationUser();
        self::$api = new LoyaltyStoregroupsApi();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for loyaltyStoreGroupsGet
     *
     * GET Loyalty/StoreGroups.
     *
     * @throws ApiException
     */
    public function testLoyaltyStoreGroupsGet()
    {
        try {
            $response = self::$api->getAll(1, 2);
        } catch (ApiException $e) {
            print_r($e->getMessage());
            throw $e;
        }
        $this->assertNotEmpty($response);
        $this->assertInstanceOf(LoyaltyStoregroupsList::class, $response);
        $this->assertInternalType('int', $response->getCount());

        self::$storegroupsList = $response;

        foreach ($response->getData() as $storegroup) {
            $this->assertInstanceOf(LoyaltyStoregroupsProductModel::class, $storegroup);
            $this->assertEquals('loyalty.storegroups', $storegroup->getObject());
            $this->assertNotEmpty($storegroup->getId());
            $this->assertNotEmpty($storegroup->getMerchant());
            $this->assertNotEmpty($storegroup->getMerchant()->getId());
            $this->assertNotEmpty($storegroup->getCreated());
        }
    }

    /**
     * Test case for loyaltyStoregroupsGetById
     *
     * GET Loyalty/StoreGroups/{id}.
     *
     * @throws ApiException
     */
    public function testLoyaltyStoregroupsGetById()
    {
        if (isset(self::$storegroupsList) && !empty(self::$storegroupsList->getData())) {
            try {
                $response = self::$api->getOne(self::$storegroupsList->getData()[0]->getId());
            } catch (ApiException $e) {
                print_r($e->getMessage());
                throw $e;
            }

            $this->assertNotEmpty($response);
            $this->assertInstanceOf(LoyaltyStoregroupsProductModel::class, $response);
            $this->assertEquals('loyalty.storegroups', $response->getObject());
            $this->assertNotEmpty($response->getId());
            $this->assertNotEmpty($response->getMerchant());
            $this->assertNotEmpty($response->getMerchant()->getId());
            $this->assertNotEmpty($response->getCreated());
        }
    }

    /**
     * Test case for loyaltyStoregroupsPost
     *
     * POST Loyalty/Storegroups.
     *
     * @throws ApiException
     */
    public function testLoyaltyStoregroupsPost()
    {
        if (isset(self::$storegroupsList) && !empty(self::$storegroupsList->getData())) {
            self::$storegroupDTO = new LoyaltyStoregroupsDTO();
            self::$storegroupDTO->setMerchant(self::$storegroupsList->getData()[0]->getMerchant()->getId());
            self::$storegroupDTO->setName("very dummy Storegroup");

            try {
                self::$dummyStoregroupsProductModel = self::$api->addStoreGroup(self::$storegroupDTO);
            } catch (ApiException $e) {
                print_r($e->getMessage());
                throw $e;
            }

            $this->assertNotEmpty(self::$dummyStoregroupsProductModel);
            $this->assertInstanceOf(LoyaltyStoregroupsProductModel::class, self::$dummyStoregroupsProductModel);
            $this->assertEquals('loyalty.storegroups', self::$dummyStoregroupsProductModel->getObject());
            $this->assertNotEmpty(self::$dummyStoregroupsProductModel->getId());
            $this->assertNotEmpty(self::$dummyStoregroupsProductModel->getName());
            $this->assertEquals(self::$dummyStoregroupsProductModel->getName(), "very dummy Storegroup");
            $this->assertNotEmpty(self::$dummyStoregroupsProductModel->getMerchant());
            $this->assertNotEmpty(self::$dummyStoregroupsProductModel->getMerchant()->getId());
            $this->assertNotEmpty(self::$dummyStoregroupsProductModel->getCreated());
        }
    }

    /**
     * Test case for loyaltyStoreGroupsIdPut
     *
     * PUT Loyalty/StoreGroups/{id}.
     *
     * @depends testLoyaltyStoregroupsPost
     * @throws ApiException
     */
    public function testLoyaltyStoreGroupsIdPut()
    {
        if (isset(self::$storegroupDTO)) {
            self::$storegroupDTO->setName("name has changed");

            try {
                $response = self::$api->updateStoreGroup(self::$dummyStoregroupsProductModel->getId(), self::$storegroupDTO);
            } catch (ApiException $e) {
                print_r($e->getMessage());
                throw $e;
            }

            $this->assertNotEmpty($response);
            $this->assertInstanceOf(LoyaltyStoregroupsProductModel::class, $response);
            $this->assertEquals('loyalty.storegroups', $response->getObject());
            $this->assertNotEmpty($response->getId());
            $this->assertEquals($response->getId(), self::$dummyStoregroupsProductModel->getId());
            $this->assertNotEmpty($response->getName());
            $this->assertEquals($response->getName(), "name has changed");
            $this->assertNotEmpty($response->getMerchant());
            $this->assertNotEmpty($response->getMerchant()->getId());
            $this->assertNotEmpty($response->getCreated());
        }
    }

    /**
     * Test case for loyaltyStoreGroupsIdDelete
     *
     * DELETE Loyalty/StoreGroups/{id}.
     *
     * @depends testLoyaltyStoregroupsPost
     * @throws ApiException
     */
    public function testLoyaltyStoreGroupsIdDelete()
    {
        if (isset(self::$dummyStoregroupsProductModel)) {
            try {
                $response = self::$api->removeStoreGroup(self::$dummyStoregroupsProductModel->getId());
            } catch (ApiException $e) {
                print_r($e->getMessage());
                throw $e;
            }

            $this->assertNotEmpty($response[0]);
            $this->assertInstanceOf(LoyaltyStoregroupsProductModel::class, $response[0]);
            $this->assertEquals('loyalty.storegroups', $response[0]->getObject());
            $this->assertNotEmpty($response[0]->getId());
            $this->assertEquals($response[0]->getId(), self::$dummyStoregroupsProductModel->getId());
            $this->assertNotEmpty($response[0]->getName());
            $this->assertEquals($response[0]->getName(), self::$storegroupDTO->getName());
            $this->assertNotEmpty($response[0]->getMerchant());
            $this->assertNotEmpty($response[0]->getMerchant()->getId());
            $this->assertEquals($response[0]->getMerchant()->getId(), self::$dummyStoregroupsProductModel->getMerchant()->getId());
            $this->assertNotEmpty($response[0]->getCreated());
        }
    }
}
