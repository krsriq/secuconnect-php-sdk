<?php
/**
 * PaymentSecupayInvoicesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Secuconnect\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SecuConnect API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Secuconnect\Client;

use Secuconnect\Client\Api\PaymentSecupayInvoicesApi;
use Secuconnect\Client\Api\SecuconnectObjects;
use Secuconnect\Client\Model\PaymentCustomersProductModel;
use Secuconnect\Client\Model\SecupayTransactionProductModel;

/**
 * PaymentSecupayInvoicesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Secuconnect\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentSecupayInvoicesApiTest extends \PHPUnit_Framework_TestCase
{
    private static $secuconnectObjects;
    private static $invoiceTransactionId;
    private static $customerId;
    private static $amount;
    private static $currency;
    private static $purpose;
    private static $orderId;
    private static $accrual;
    private static $basket;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        self::$secuconnectObjects = SecuconnectObjects::getInstance();
        self::$customerId = self::$secuconnectObjects->getCustomer()->getId();
        self::$amount = 100;
        self::$currency = 'EUR';
        self::$purpose = 'for what text';
        self::$orderId = 'ZZZZZZ';
        self::$accrual = true;
        self::$basket = self::$secuconnectObjects->getBasket();
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        $this->api = self::$secuconnectObjects->getApi();
        $this->api = new PaymentSecupayInvoicesApi();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
        $this->api = null;
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
        self::$secuconnectObjects = null;
        self::$customerId = null;
        self::$amount = null;
        self::$currency = null;
        self::$purpose = null;
        self::$orderId = null;
        self::$accrual = null;
        self::$basket = null;
    }

    /**
     * Test case for paymentSecupayinvoicesPost
     */
    public function testPaymentSecupayinvoicesPost()
    {
        $invoiceData = [
            "customer" => self::$customerId,
            "amount" => self::$amount,
            "currency" => self::$currency,
            "purpose" => self::$purpose,
            "order_id" => self::$orderId,
            "accrual" => self::$accrual,
            "basket" => self::$basket
        ];

        try {
            $response = $this->api->paymentSecupayinvoicesPost($invoiceData);
            self::$invoiceTransactionId = $response->getId();
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty(self::$invoiceTransactionId);
        $this->assertInstanceOf(SecupayTransactionProductModel::class, $response);
        $this->assertEquals('payment.secupayinvoices', $response->getObject());
        $this->assertEquals(self::$invoiceTransactionId, $response->getId());
        $this->assertNotEmpty($response->getTransId());
        $this->assertNotEmpty($response->getStatus());
        $this->assertEquals(self::$amount, $response->getAmount());
        $this->assertEquals(self::$currency, $response->getCurrency());
        $this->assertEquals(self::$purpose, $response->getPurpose());
        $this->assertEquals(self::$orderId, $response->getOrderId());

        for ($i = 0; $i < 3; $i++) {
            $this->assertEquals(self::$basket[$i], $response->getBasket()[$i]);
            $this->assertEquals(self::$basket[$i]->getItemType(), $response->getBasket()[$i]->getItemType());
            $this->assertEquals(self::$basket[$i]->getArticleNumber(), $response->getBasket()[$i]->getArticleNumber());
            $this->assertEquals(self::$basket[$i]->getQuantity(), $response->getBasket()[$i]->getQuantity());
            $this->assertEquals(self::$basket[$i]->getName(), $response->getBasket()[$i]->getName());
            $this->assertEquals(self::$basket[$i]->getModel(), $response->getBasket()[$i]->getModel());
            $this->assertEquals(self::$basket[$i]->getEan(), $response->getBasket()[$i]->getEan());
            $this->assertEquals(self::$basket[$i]->getTax(), $response->getBasket()[$i]->getTax());
            $this->assertEquals(self::$basket[$i]->getTotal(), $response->getBasket()[$i]->getTotal());
            $this->assertEquals(self::$basket[$i]->getPrice(), $response->getBasket()[$i]->getPrice());
            $this->assertEquals(self::$basket[$i]->getApikey(), $response->getBasket()[$i]->getApikey());
            $this->assertEquals(self::$basket[$i]->getTransactionHash(), $response->getBasket()[$i]->getTransactionHash());
            $this->assertEquals(self::$basket[$i]->getContractId(), $response->getBasket()[$i]->getContractId());
        }

        $this->assertEquals(self::$accrual, $response->getAccrual());
        $this->assertEquals('sale', $response->getPaymentAction());
        $this->assertNotEmpty($response->getTransferPurpose());
        $this->assertNotEmpty($response->getTransferAccount());
        $this->assertNotEmpty($response->getTransferAccount()['iban']);
        $this->assertNotEmpty($response->getTransferAccount()['bic']);
        $this->assertNotEmpty($response->getTransferAccount()['accountnumber']);
        $this->assertNotEmpty($response->getTransferAccount()['bankcode']);
        $this->assertNotEmpty($response->getTransferAccount()['account_owner']);
        $this->assertInstanceOf(PaymentCustomersProductModel::class, $response->getCustomer());
        $this->assertNotEmpty($response->getCustomer());
        $this->assertEquals('payment.customers', $response->getCustomer()->getObject());
        $this->assertEquals(self::$customerId, $response->getCustomer()->getId());
        $this->assertNotEmpty($response->getCustomer()->getContract());
        $this->assertEquals('payment.contracts', $response->getCustomer()->getContract()->getObject());
        $this->assertNotEmpty($response->getCustomer()->getContract()->getId());
        $this->assertNotEmpty($response->getCustomer()->getCreated());
        $this->assertNotEmpty($response->getRedirectUrl());
        $this->assertNotEmpty($response->getRedirectUrl()['iframe_url']);
        $this->assertNotEmpty($response->getRedirectUrl()['url_success']);
        $this->assertNotEmpty($response->getRedirectUrl()['url_failure']);
        $this->assertNotEmpty($response->getIframeUrl());
    }

    /**
     * Test case for paymentSecupayinvoicesHashGet
     */
    public function testPaymentSecupayInvoicesGetById()
    {
        try {
            $response = $this->api->paymentSecupayInvoicesGetById(self::$invoiceTransactionId);
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty(self::$invoiceTransactionId);
        $this->assertInstanceOf(SecupayTransactionProductModel::class, $response);
        $this->assertEquals('payment.secupayinvoices', $response->getObject());
        $this->assertEquals(self::$invoiceTransactionId, $response->getId());
        $this->assertNotEmpty($response->getTransId());
        $this->assertNotEmpty($response->getStatus());
        $this->assertEquals(self::$amount, $response->getAmount());
        $this->assertEquals(self::$currency, $response->getCurrency());
        $this->assertEquals(self::$purpose, $response->getPurpose());
        $this->assertEquals(self::$orderId, $response->getOrderId());

        for ($i = 0; $i < 3; $i++) {
            $this->assertEquals(self::$basket[$i], $response->getBasket()[$i]);
            $this->assertEquals(self::$basket[$i]->getItemType(), $response->getBasket()[$i]->getItemType());
            $this->assertEquals(self::$basket[$i]->getArticleNumber(), $response->getBasket()[$i]->getArticleNumber());
            $this->assertEquals(self::$basket[$i]->getQuantity(), $response->getBasket()[$i]->getQuantity());
            $this->assertEquals(self::$basket[$i]->getName(), $response->getBasket()[$i]->getName());
            $this->assertEquals(self::$basket[$i]->getModel(), $response->getBasket()[$i]->getModel());
            $this->assertEquals(self::$basket[$i]->getEan(), $response->getBasket()[$i]->getEan());
            $this->assertEquals(self::$basket[$i]->getTax(), $response->getBasket()[$i]->getTax());
            $this->assertEquals(self::$basket[$i]->getTotal(), $response->getBasket()[$i]->getTotal());
            $this->assertEquals(self::$basket[$i]->getPrice(), $response->getBasket()[$i]->getPrice());
            $this->assertEquals(self::$basket[$i]->getApikey(), $response->getBasket()[$i]->getApikey());
            $this->assertEquals(self::$basket[$i]->getTransactionHash(), $response->getBasket()[$i]->getTransactionHash());
            $this->assertEquals(self::$basket[$i]->getContractId(), $response->getBasket()[$i]->getContractId());
        }

        $this->assertEquals(self::$accrual, $response->getAccrual());
        $this->assertEquals('sale', $response->getPaymentAction());
        $this->assertNotEmpty($response->getTransferPurpose());
        $this->assertNotEmpty($response->getTransferAccount());
        $this->assertNotEmpty($response->getTransferAccount()['iban']);
        $this->assertNotEmpty($response->getTransferAccount()['bic']);
        $this->assertNotEmpty($response->getTransferAccount()['accountnumber']);
        $this->assertNotEmpty($response->getTransferAccount()['bankcode']);
        $this->assertNotEmpty($response->getTransferAccount()['account_owner']);
        $this->assertInstanceOf(PaymentCustomersProductModel::class, $response->getCustomer());
        $this->assertNotEmpty($response->getCustomer());
        $this->assertEquals('payment.customers', $response->getCustomer()->getObject());
        $this->assertEquals(self::$customerId, $response->getCustomer()->getId());
        $this->assertNotEmpty($response->getCustomer()->getContract());
        $this->assertEquals('payment.contracts', $response->getCustomer()->getContract()->getObject());
        $this->assertNotEmpty($response->getCustomer()->getContract()->getId());
        $this->assertNotEmpty($response->getCustomer()->getCreated());
        $this->assertNotEmpty($response->getRedirectUrl());
        $this->assertNotEmpty($response->getRedirectUrl()['iframe_url']);
        $this->assertNotEmpty($response->getRedirectUrl()['url_success']);
        $this->assertNotEmpty($response->getRedirectUrl()['url_failure']);
    }

    /**
     * Test case for paymentSecupayinvoicesHashCancelPost
     */
    public function testPaymentSecupayinvoicesCancelById()
    {
        try {
            $response = $this->api->paymentSecupayinvoicesCancelById(self::$invoiceTransactionId);
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty($response);
        $this->assertEquals(true, $response['result']);
        $this->assertEquals(true, $response['demo']);
    }
}
