<?php
/**
 * PaymentContractsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Secuconnect\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SecuConnect API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Secuconnect\Client;

use PHPUnit_Framework_TestCase;
use Secuconnect\Client\Api\PaymentContractsApi;
use Secuconnect\Client\Api\SecuconnectObjects;
use Secuconnect\Client\Model\PaymentContractsDTO;
use Secuconnect\Client\Model\PaymentContractsProductModel;

/**
 * PaymentContractsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Secuconnect\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentContractsApiTest extends PHPUnit_Framework_TestCase
{
    private static $contractId;
    private static $contract;
    private static $created;
    private static $updated;
    private static $testContract1;
    private static $testContract2;
    private static $testContract3;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        self::$contract = new PaymentContractsDTO();
        self::$contract->setMerchant("MRC_WVHJQFQ4JNVYNG5B55TYK748ZCHQP8")
            ->setInternalReference("181365")
            ->setContractId(49760)
            ->setDemo(true)
            ->setDebitProductId(20)
            ->setPrepayProductId(37)
            ->setInvoiceProductId(329)
            ->setCreditcardProductId(21)
            ->setUrlPush("http://requestb.in/xcrbzxxc")
            ->setAllowTransactions(true)
            ->setAllowCloning(true)
            ->setUniqueOrderId(false)
            ->setScoring(true)
            ->setSepaMandateInform("never");
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        SecuconnectObjects::getInstance()->authenticateByApplicationUser();
        $this->api = SecuconnectObjects::getInstance()->getApi();
        $this->api = new PaymentContractsApi();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
        $this->api = null;
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
        self::$contractId = null;
        self::$contract = null;
        self::$created = null;
        self::$updated = null;
    }

    /**
     * Test case for paymentContractsPost
     */
    public function testPaymentContractsPost()
    {
        try {
            $response = $this->api->paymentContractsPost(self::$contract);
            self::$contractId = $response->getId();
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty(self::$contractId);
        $this->assertInstanceOf(PaymentContractsProductModel::class, $response);
        $this->assertEquals('payment.contracts', $response->getObject());
        $this->assertNotNull($response->getId());
        $this->assertNotEmpty($response->getId());
        $this->assertNull($response->getParent());
        $this->assertTrue($response->getDemo());
        $this->assertTrue($response->getAllowCloning());
        $this->assertEquals('never', $response->getSepaMandateInform());
        $this->assertNotNull($response->getCreated());
        $this->assertNotEmpty($response->getCreated());
        $this->assertNull($response->getUpdated());

        self::$created = $response->getCreated();
    }

    /**
     * Test case for paymentContractsIdPut
     */
    public function testPaymentContractsIdPut()
    {
        self::$contract
            ->setInternalReference("264748")
            ->setInvoiceProductId(267)
            ->setUrlPush("http://example.com/push_url")
            ->setAllowCloning(false)
            ->setScoring(true);

        try {
            $response = $this->api->paymentContractsIdPut(
                self::$contractId,
                self::$contract
            );
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty(self::$contractId);
        $this->assertInstanceOf(PaymentContractsProductModel::class, $response);
        $this->assertEquals('payment.contracts', $response->getObject());
        $this->assertEquals(self::$contractId, $response->getId());
        $this->assertNull($response->getParent());
        $this->assertTrue($response->getDemo());
        $this->assertTrue($response->getAllowCloning());
        $this->assertEquals('never', $response->getSepaMandateInform());
        $this->assertEquals(self::$created, $response->getCreated());
        $this->assertNotNull($response->getUpdated());
        $this->assertNotEmpty($response->getUpdated());

        self::$updated = $response->getUpdated();
    }

    /**
     * Test case for paymentContractsGetById
     */
    public function testPaymentContractsGetById()
    {
        try {
            $response = $this->api->paymentContractsGetById(self::$contractId);
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertInstanceOf(PaymentContractsProductModel::class, $response);
        $this->assertEquals('payment.contracts', $response->getObject());
        $this->assertEquals(self::$contractId, $response->getId());
        $this->assertNull($response->getParent());
        $this->assertTrue($response->getDemo());
        $this->assertTrue($response->getAllowCloning());
        $this->assertEquals('never', $response->getSepaMandateInform());
        $this->assertEquals(self::$created, $response->getCreated());
        $this->assertEquals(self::$updated, $response->getUpdated());
    }

    /**
     * Test case for paymentContractsGet
     */
    public function testPaymentContractsGet()
    {
        try {
            $response = $this->api->paymentContractsGet();
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty($response);
        $this->assertTrue(is_int($response->getCount()));

        foreach ($response->getData() as $contract) {
            $this->assertInstanceOf(PaymentContractsProductModel::class, $contract);
            $this->assertEquals('payment.contracts', $contract->getObject());
            $this->assertNotNull($contract->getId());
            $this->assertNotEmpty($contract->getId());
            $this->assertNotNull($contract->getDemo());
            $this->assertNotNull($contract->getSepaMandateInform());
            $this->assertNotNull($contract->getCreated());
            $this->assertNotEmpty($contract->getCreated());
        }
    }

    /**
     * Test case for checking count param
     */
    public function testPaymentContractsGetCountQueryParam()
    {
        try {
            self::$testContract1 = $this->api->paymentContractsPost(self::$contract);
            self::$testContract2 = $this->api->paymentContractsPost(self::$contract);
            self::$testContract3 = $this->api->paymentContractsPost(self::$contract);

            $response = $this->api->paymentContractsGet(2);
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty($response);
        $this->assertEquals(2, count($response->getData()));
    }

    /**
     * Test case for checking offset param
     */
    public function testPaymentContractsGetOffsetQueryParam()
    {
        try {
            $response1 = $this->api->paymentContractsGet();
            $response2 = $this->api->paymentContractsGet(null, 1);
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotEmpty($response1);
        $this->assertNotEmpty($response2);
        $this->assertEquals($response1->getData()[1], $response2->getData()[0]);

        try {
            $this->api->paymentContractsIdDelete(self::$testContract1->getId());
            $this->api->paymentContractsIdDelete(self::$testContract2->getId());
            $this->api->paymentContractsIdDelete(self::$testContract3->getId());
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }
    }

    /**
     * Test case for paymentContractsIdClonePost
     */
    public function testPaymentContractsIdClonePost()
    {
//        try {
//            $response = $this->api->paymentContractsIdClonePost(self::$productId);
//            echo var_dump($response);
//        } catch (\Secuconnect\Client\ApiException $e) {
//            print_r($e->getResponseBody());
//            throw $e;
//        }
    }

    /**
     * Test case for paymentContractsIdPaymentMethodsGet
     */
    public function testPaymentContractsIdPaymentMethodsGet()
    {
//        try {
//            $response = $this->api->paymentContractsIdPaymentMethodsGet(self::$productId);
//            echo var_dump($response);
//        } catch (\Secuconnect\Client\ApiException $e) {
//            print_r($e->getResponseBody());
//            throw $e;
//        }
    }

    /**
     * Test case for paymentContractsIdRequestIdPost
     */
    public function testPaymentContractsIdRequestIdPost()
    {
//        try {
//            $response = $this->api->paymentContractsIdRequestIdPost(self::$productId);
//            echo var_dump($response);
//        } catch (\Secuconnect\Client\ApiException $e) {
//            print_r($e->getResponseBody());
//            throw $e;
//        }
    }

    /**
     * Test case for paymentContractsIdDelete
     */
    public function testPaymentContractsIdDelete()
    {
        try {
            $response = $this->api->paymentContractsIdDelete(self::$contractId);
        } catch (\Secuconnect\Client\ApiException $e) {
            print_r($e->getResponseBody());
            throw $e;
        }

        $this->assertNotNull($response);
        $this->assertInternalType('array', $response);
        $this->assertContainsOnlyInstancesOf(PaymentContractsProductModel::class, $response);
        $this->assertEquals('payment.contracts', $response[0]->getObject());
        $this->assertEquals(self::$contractId, $response[0]->getId());
        $this->assertNull($response[0]->getParent());
        $this->assertTrue($response[0]->getDemo());
        $this->assertTrue($response[0]->getAllowCloning());
        $this->assertEquals('never', $response[0]->getSepaMandateInform());
        $this->assertEquals(self::$created, $response[0]->getCreated());
        $this->assertEquals(self::$updated, $response[0]->getUpdated());
    }
}
